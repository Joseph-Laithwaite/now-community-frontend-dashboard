{"remainingRequest":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/src/pages/Dashboard/Examples/UserProfile/EditUserCard.vue?vue&type=style&index=0&id=1abe87ad&lang=scss&scoped=true&","dependencies":[{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/src/pages/Dashboard/Examples/UserProfile/EditUserCard.vue","mtime":1603736564337},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoubWQtcHJvZ3Jlc3MtYmFyIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiAwOwogIHJpZ2h0OiAwOwogIGxlZnQ6IDA7Cn0KLm1kLWVycm9yewogIGJvdHRvbTogLThweDsKICBjb2xvcjogcmVkOwogIGZvbnQtc2l6ZTogc21hbGxlcjsKfQo="},{"version":3,"sources":["EditUserCard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EditUserCard.vue","sourceRoot":"src/pages/Dashboard/Examples/UserProfile","sourcesContent":["<template>\n  <div>\n    <form novalidate class=\"md-layout\" @submit.prevent=\"validateUser\">\n      <md-card class=\"md-layout-item\">\n              <md-card-header class=\"md-card-header-icon\">\n        <div class=\"card-icon\">\n          <md-icon>perm_identity</md-icon>\n        </div>\n        <div class=\"md-title\" v-if=\"newUser\">\n          Create New User\n        </div>\n        <div class=\"md-title\" v-else>\n          Edit User\n        </div>\n      </md-card-header>\n\n        <md-card-content>\n          <div class=\"md-layout md-gutter\">\n            <div class=\"md-layout-item md-small-size-100\">\n              <md-field :class=\"getValidationClass('first_name')\">\n                <label for=\"first-name\">First Name</label>\n                <md-input name=\"first-name\" id=\"first-name\" \n                  @input=\"serverValidationErrors.first_name=null\" \n                  v-model=\"form.first_name\" \n                  :disabled=\"sending\" />\n                <span class=\"md-error\" v-if=\"!$v.form.first_name.required\">The first name is required</span>\n                <span class=\"md-error\" v-else-if=\"!$v.form.first_name.minlength\">First name must be longer than 3 characters</span>\n              </md-field>\n              <span v-if=\"serverValidationErrors.first_name\">\n                  <span \n                      class=\"md-error\" \n                      v-for=\"error in serverValidationErrors.first_name\"\n                      :key=\"error\"                    \n                    >\n                    {{error}}\n                    <br>\n                  </span>\n                </span>\n            </div>\n\n            <div class=\"md-layout-item md-small-size-100\">\n              <md-field :class=\"getValidationClass('last_name')\">\n                <label for=\"last-name\">Last Name</label>\n                <md-input name=\"last-name\" id=\"last-name\" \n                  @input=\"serverValidationErrors.last_name=null\" \n                  autocomplete=\"family-name\" \n                  v-model=\"form.last_name\" \n                  :disabled=\"sending\" />\n                <span class=\"md-error\" v-if=\"!$v.form.last_name.required\">The last name is required</span>\n                <span class=\"md-error\" v-else-if=\"!$v.form.last_name.minlength\">Last name must be longer than 3 characters</span>\n              </md-field>\n              <span v-if=\"serverValidationErrors.last_name\">\n                  <span \n                      class=\"md-error\" \n                      v-for=\"error in serverValidationErrors.last_name\"\n                      :key=\"error\"                    \n                    >\n                    {{error}}\n                    <br>\n                  </span>\n                </span>\n            </div>\n          \n\n          <div class=\"md-layout-item md-small-size-100\">\n              <md-field :class=\"getValidationClass('username')\">\n                <label for=\"username\">Username</label>\n                <md-input name=\"username\" id=\"username\" \n                  @input=\"serverValidationErrors.username=null\" \n                  v-model=\"form.username\" \n                  :disabled=\"sending\" />\n                <span class=\"md-error\" v-if=\"!$v.form.username.required\">The username is required</span>\n                <span class=\"md-error\" v-if=\"!$v.form.username.alphaNum\">The username must be made of alpha numeric characters with no special characters or spaces</span>\n              </md-field>\n              <span v-if=\"serverValidationErrors.username\">\n                  <span \n                      class=\"md-error\" \n                      v-for=\"error in serverValidationErrors.username\"\n                      :key=\"error\"                    \n                    >\n                    {{error}}\n                    <br>\n                  </span>\n                </span>\n            </div>\n\n          </div>\n          <div class=\"md-layout md-gutter\">\n            <!-- <div class=\"md-layout-item md-small-size-100\">\n              <md-field>\n                <label for=\"dob\">Date of Birth</label>\n                <md-input type=\"date\" id=\"dob\" name=\"dob\" autocomplete=\"dob\" v-model=\"form.dob\" placeholder=\"Date of Birth\" :disabled=\"sending\" />\n                <md-datepicker v-model=\"form.dob\" :disabled=\"sending\" id=\"dob\" name=\"dob\">\n                  <label>Date of Birth</label>\n                </md-datepicker>\n              </md-field>\n            </div> -->\n            \n            <div class=\"md-layout-item md-small-size-100\">\n              <md-field :class=\"getValidationClass('email')\">\n                <label for=\"email\">Email</label>\n                <md-input \n                  @input=\"serverValidationErrors.email=null\" \n                  type=\"email\" name=\"email\" id=\"email\" \n                  autocomplete=\"email\" \n                  v-model=\"form.email\" \n                  :disabled=\"sending\" \n                />\n                <span class=\"md-error\" v-if=\"!$v.form.email.required\">The email is required</span>\n                <span class=\"md-error\" v-else-if=\"!$v.form.email.email\">Invalid email</span>\n              </md-field>\n              <!-- <validation-error :errors=\"serverValidationErrors.email\"/> -->\n                <span v-if=\"serverValidationErrors.email\">\n                  <span \n                      class=\"md-error\" \n                      v-for=\"error in serverValidationErrors.email\"\n                      :key=\"error\"                    \n                    >\n                    {{error}}\n                    <br>\n                  </span>\n                </span>\n            </div>\n          </div>\n        </md-card-content>\n\n        <md-progress-bar md-mode=\"indeterminate\" v-if=\"sending\" />\n\n        <md-card-actions>\n          <md-button type=\"submit\" class=\"md-primary\" :disabled=\"sending\">\n            <span v-if=\"newUser\">Create user</span>\n            <span v-else>Update user</span>\n          </md-button>\n        </md-card-actions>\n      </md-card>\n\n      <!-- <md-snackbar :md-active.sync=\"userSaved\">The user {{ lastUser }} was saved with success!</md-snackbar> -->\n    </form>\n  </div>\n</template>\n\n<script>\n  import { validationMixin } from 'vuelidate'\n  import {\n    required,\n    email,\n    minLength,\n    maxLength,\n    alphaNum\n  } from 'vuelidate/lib/validators'\n\n  // import {ValidationError} from \"@/components\";\n\n  export default {\n    name: 'edit-user-card',\n    mixins: [validationMixin],\n    // components: {ValidationError},\n   \n    props: {\n      user: {type: Object, default: null}\n    },\n\n    data: () => ({\n      form: {\n        id: null,\n        first_name: null,\n        last_name: null,\n        username: null,\n        dob: null,\n        email: null,\n      },\n      serverValidationErrors: {\n          email: [],\n          first_name: [],\n          last_name: [],\n          username: [],\n      },\n      userSaved: false,\n      sending: false,\n      lastUser: null\n    }),\n\n    validations() {\n      var form = new Object();\n\n      form = {\n        first_name: {\n          required,\n          minLength: minLength(3)\n        },\n        last_name: {\n          required\n          ,minLength: minLength(3)\n        },\n        email: {\n          required,email\n        },\n        username: {\n          required\n          ,alphaNum\n        }\n      }\n      return {form};\n    },\n\n    methods: {\n      getValidationClass (fieldName) {\n        const field = this.$v.form[fieldName]\n        if (field) {\n          return {\n            'md-invalid': field.$invalid && field.$dirty\n          }\n        }\n      },\n\n      clearForm () {\n        this.$v.$reset()\n        this.form.first_name = null\n        this.form.last_name = null\n        this.form.username = null\n        this.form.dob = null\n        this.form.email = null\n      },\n\n      saveUser () {\n        this.sending = true\n        if(this.newUser){\n          this.createUser();\n        }else{\n          this.updateUser();\n        }\n      },\n      validateUser () {\n        this.$v.$touch()\n        if (!this.$v.$invalid) {\n          this.saveUser()\n        }\n      },\n      \n      updateUser() {\n        this.$store.dispatch(\"users/update\", this.form)\n        .then(response =>{\n          this.$store.dispatch(\"alerts/success\", \"Profile updated successfully.\")\n          this.userSaved = true\n          this.sending = false\n          //Emit with new user for prop to be re established\n          //this.user = await this.$store.getters[\"users/user\"]\n        })\n        .catch (e=>{\n          console.log(e);\n          this.$store.dispatch(\"alerts/error\", \"Oops, something went wrong! \" + e.message);\n          this.sending = false;\n          if(e.errors.email){this.serverValidationErrors.email = e.errors.email;};\n          if(e.errors.first_name){this.serverValidationErrors.first_name=e.errors.first_name;};\n          if(e.errors.last_name){this.serverValidationErrors.first_name=e.errors.last_name;};\n          if(e.errors.username){this.serverValidationErrors.username=e.errors.username;};\n        })\n      },\n      createUser() {\n        this.$store.dispatch(\"users/add\", this.form)\n        .then(response =>{\n          console.log('success');\n          this.$store.dispatch(\"alerts/success\", \"User created successfully.\")\n          this.userSaved = true\n          this.sending = false\n          let user = this.$store.getters[\"users/user\"]\n          console.log(user);\n          this.$emit('user-created', user)\n        })\n        .catch (e=>{\n          console.log(e);\n          this.$store.dispatch(\"alerts/error\", \"Oops, something went wrong! \" + e.message)\n          this.sending = false\n          if(e.errors.email){this.serverValidationErrors.email=e.errors.email;};\n          if(e.errors.first_name){this.serverValidationErrors.first_name=e.errors.first_name;};\n          if(e.errors.last_name){this.serverValidationErrors.first_name=e.errors.last_name;};\n          if(e.errors.username){this.serverValidationErrors.username=e.errors.username;};\n          //this.setApiValidation(e.errors.email)\n        })\n      }\n    },\n    computed:{\n      newUser(){\n       if(this.user==null){\n          return true;\n        }\n        return false;\n      }\n    },\n    created(){\n        if(!this.newUser){\n          this.form.id = this.user.id\n          this.form.username = this.user.username\n          this.form.first_name = this.user.first_name\n          this.form.last_name = this.user.last_name\n          this.form.dob = null\n          this.form.email = this.user.email\n        }else{\n          this.clearForm()\n        }\n      }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .md-progress-bar {\n    position: absolute;\n    top: 0;\n    right: 0;\n    left: 0;\n  }\n  .md-error{\n    bottom: -8px;\n    color: red;\n    font-size: smaller;\n  }\n</style>"]}]}