{"remainingRequest":"/Users/josephlaithwaite/Documents/VueLearning/vue-material-dashboard-laravel-master/vue-material-dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/josephlaithwaite/Documents/VueLearning/vue-material-dashboard-laravel-master/vue-material-dashboard/src/components/SidebarPlugin/SidebarItem.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/josephlaithwaite/Documents/VueLearning/vue-material-dashboard-laravel-master/vue-material-dashboard/src/components/SidebarPlugin/SidebarItem.vue","mtime":1598060882000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/vue-material-dashboard-laravel-master/vue-material-dashboard/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/vue-material-dashboard-laravel-master/vue-material-dashboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/vue-material-dashboard-laravel-master/vue-material-dashboard/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/vue-material-dashboard-laravel-master/vue-material-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/vue-material-dashboard-laravel-master/vue-material-dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5zaWRlYmFyLW1lbnUtaXRlbSB7CiAgY3Vyc29yOiBwb2ludGVyOwp9Cg=="},{"version":3,"sources":["SidebarItem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuMA;AACA;AACA","file":"SidebarItem.vue","sourceRoot":"src/components/SidebarPlugin","sourcesContent":["<template>\n  <component\n    :is=\"baseComponent\"\n    :to=\"link.path ? link.path : '/'\"\n    :class=\"{ active: isActive }\"\n    tag=\"li\"\n  >\n    <a\n      v-if=\"isMenu\"\n      href=\"#\"\n      class=\"nav-link sidebar-menu-item\"\n      :aria-expanded=\"!collapsed\"\n      data-toggle=\"collapse\"\n      @click.prevent=\"collapseMenu\"\n    >\n      <md-icon v-if=\"link.icon\">{{ link.icon }}</md-icon>\n      <md-icon v-if=\"link.image\">\n      <md-avatar style=\"height: auto; width: auto; min-width: auto\">\n        <img :src=\"link.image\" alt=\"Avatar\">\n      </md-avatar>\n      </md-icon>\n      <p>\n        {{ link.name }}\n        <b class=\"caret\"></b>\n      </p>\n    </a>\n\n    <collapse-transition>\n      <div v-if=\"$slots.default || this.isMenu\" v-show=\"!collapsed\">\n        <ul class=\"nav\">\n          <slot></slot>\n        </ul>\n      </div>\n    </collapse-transition>\n\n    <slot\n      name=\"title\"\n      v-if=\"children.length === 0 && !$slots.default && link.path\"\n    >\n      <component\n        :to=\"link.path\"\n        @click.native=\"linkClick\"\n        :is=\"elementType(link, false)\"\n        :class=\"{ active: link.active }\"\n        class=\"nav-link\"\n        :target=\"link.target\"\n        :href=\"link.path\"\n      >\n        <template v-if=\"addLink\">\n          <span class=\"sidebar-mini\">{{ linkPrefix }}</span>\n          <span class=\"sidebar-normal\">{{ link.name }}</span>\n        </template>\n        <template v-else>\n          <md-icon>{{ link.icon }}</md-icon>\n          <p>{{ link.name }}</p>\n        </template>\n      </component>\n    </slot>\n  </component>\n</template>\n<script>\nexport default {\n  name: \"sidebar-item\",\n  props: {\n    menu: {\n      type: Boolean,\n      default: false\n    },\n    opened: {\n      type: Boolean,\n      default: false\n    },\n    link: {\n      type: Object,\n      default: () => {\n        return {\n          name: \"\",\n          icon: \"\",\n          image: \"\",\n          path: \"\",\n          children: []\n        };\n      }\n    }\n  },\n  provide() {\n    return {\n      addLink: this.addChild,\n      removeLink: this.removeChild\n    };\n  },\n  inject: {\n    addLink: { default: null },\n    removeLink: { default: null },\n    autoClose: {\n      default: true\n    }\n  },\n  data() {\n    return {\n      children: [],\n      collapsed: !this.opened\n    };\n  },\n  computed: {\n    baseComponent() {\n      return this.isMenu || this.link.isRoute ? \"li\" : \"router-link\";\n    },\n    linkPrefix() {\n      if (this.link.name) {\n        let words = this.link.name.split(\" \");\n        return words.map(word => word.substring(0, 1)).join(\"\");\n      }\n      return false;\n    },\n    isMenu() {\n      return this.children.length > 0 || this.menu === true;\n    },\n    isActive() {\n      if (this.$route && this.$route.path) {\n        let matchingRoute = this.children.find(c =>\n          this.$route.path.startsWith(c.link.path)\n        );\n        if (matchingRoute !== undefined) {\n          return true;\n        }\n      }\n      return false;\n    }\n  },\n  methods: {\n    addChild(item) {\n      const index = this.$slots.default.indexOf(item.$vnode);\n      this.children.splice(index, 0, item);\n    },\n    removeChild(item) {\n      const tabs = this.children;\n      const index = tabs.indexOf(item);\n      tabs.splice(index, 1);\n    },\n    elementType(link, isParent = true) {\n      if (link.isRoute === false) {\n        return isParent ? \"li\" : \"a\";\n      } else {\n        return \"router-link\";\n      }\n    },\n    linkAbbreviation(name) {\n      const matches = name.match(/\\b(\\w)/g);\n      return matches.join(\"\");\n    },\n    linkClick() {\n      if (!this.addLink) {\n        this.$sidebar.collapseAllMenus();\n      }\n\n      if (\n        this.autoClose &&\n        this.$sidebar &&\n        this.$sidebar.showSidebar === true\n      ) {\n        this.$sidebar.displaySidebar(false);\n      }\n    },\n    collapseMenu() {\n      if (this.collapsed) {\n        this.$sidebar.addSidebarLink(this);\n        this.$sidebar.collapseAllMenus();\n      }\n\n      this.collapsed = !this.collapsed;\n    },\n    collapseSubMenu(link) {\n      link.collapsed = !link.collapsed;\n    }\n  },\n  mounted() {\n    if (this.addLink) {\n      this.addLink(this);\n    }\n    if (this.link.collapsed !== undefined) {\n      this.collapsed = this.link.collapsed;\n    }\n    if (this.isActive && this.isMenu) {\n      this.collapsed = false;\n    }\n  },\n  destroyed() {\n    this.$sidebar.removeSidebarLink(this);\n    if (this.$el && this.$el.parentNode) {\n      this.$el.parentNode.removeChild(this.$el);\n    }\n    if (this.removeLink) {\n      this.removeLink(this);\n    }\n  }\n};\n</script>\n<style>\n.sidebar-menu-item {\n  cursor: pointer;\n}\n</style>\n"]}]}