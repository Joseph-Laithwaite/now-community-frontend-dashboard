{"remainingRequest":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/src/components/EditItemCard.vue?vue&type=style&index=1&lang=scss&","dependencies":[{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/src/components/EditItemCard.vue","mtime":1606317354480},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgogICAgI2F0dGFjaC1idXR0b24gewogICAgICAubWQtcmlwcGxlewogICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlIDsKICAgICAgICBjb2xvcjpibGFjazsKICAgICAgfQogICAgfQoKLy8gLm15LWltYWdlIHsKLy8gICAgIGRpc3BsYXk6IGZsZXg7Ci8vICAgICBmbGV4OiAxOwoKLy8gICAgIGlucHV0W3R5cGU9ImZpbGUiXSB7Ci8vICAgICAgIHdpZHRoOiAxcHg7Ci8vICAgICAgIGhlaWdodDogMXB4OwovLyAgICAgICBtYXJnaW46IC0xcHg7Ci8vICAgICAgIHBhZGRpbmc6IDA7Ci8vICAgICAgIG92ZXJmbG93OiBoaWRkZW47Ci8vICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKLy8gICAgICAgY2xpcDogcmVjdCgwIDAgMCAwKTsKLy8gICAgICAgYm9yZGVyOiAwOwovLyAgICAgfQoKLy8gICAgIC5tZC1maWxlLWljb24gewovLyAgICAgICAmOm5vdCgubWQtZGlzYWJsZWQpIHsKLy8gICAgICAgICBjdXJzb3I6IHBvaW50ZXI7Ci8vICAgICAgIH0KCi8vICAgICAgICYubWQtZGlzYWJsZWQgewovLyAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lOwovLyAgICAgICB9Ci8vICAgICB9Ci8vICAgfQo="},{"version":3,"sources":["EditItemCard.vue"],"names":[],"mappingssvBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"EditItemCard.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <form novalidate class=\"md-layout\" @submit.prevent=\"validateItem\">\n      <md-empty-state\n        v-if=\"loading\" \n        :md-description=\"'Trying to load your ' + this.itemType\">\n        <md-progress-spinner md-mode=\"indeterminate\"></md-progress-spinner>\n        <!-- <br>\n        <md-button class=\"md-primary md-raised\">Create New {{itemType}}</md-button> -->\n      </md-empty-state>\n      <md-card v-else class=\"md-layout-item\">\n        <md-card-header class=\"md-card-header-icon\">\n          <div class=\"card-icon\">\n            <md-icon>{{icon}}</md-icon>\n          </div>\n          <div class=\"md-title\" v-if=\"newItem\">\n            Create New {{itemType}}\n          </div>\n          <div class=\"md-title\" v-else>\n            Edit {{itemType}}\n          </div>\n        </md-card-header>\n        <md-card-content>\n            <!-- md-description=\"Creating project, you'll be able to upload your design and collaborate with people.\"> -->\n          <div class=\"md-layout md-gutter\">\n            <div class=\"md-layout-item md-small-size-100\"\n              v-for=\"field in itemInfo\"\n              :key=\"field.id\"\n            >\n              <!-- typeof field.fieldOptions.hideForNew !== 'undefined' && -->\n              <span v-if=\"!((field.fieldOptions.hideForNew === true && newItem))\">\n                <md-field :class=\"getValidationClass(field.id)\">\n                  <label \n                    v-if=\"field.fieldOptions.hideLabel===false || typeof field.fieldOptions.hideLabel === 'undefined'\"\n                    :for=\"field.id\" \n                    class=\"md-layout md-alignment-center-left\">\n                    {{field.label}}\n                  </label>\n                  <md-input\n                    v-if=\"field.fieldType==='input'\"\n                    :name=\"field.id\" \n                    :id=\"field.id\" \n                    :required=\"field.fieldOptions.required\"\n                    :disabled=\"field.fieldOptions.disabled || sending\"\n                    :readonly=\"field.fieldOptions.readonly\"\n                    :type=\"field.fieldOptions.type !== null ? field.fieldOptions.type : 'text'\"\n                    @input=\"serverValidationErrors[field.id] = null\" \n                    v-model=\"form[field.id]\" \n                  />\n\n                  <md-textarea \n                    md-autogrow\n                    v-if=\"field.fieldType==='textarea'\"\n                    :name=\"field.id\" \n                    :id=\"field.id\" \n                    :required=\"field.fieldOptions.required\"\n                    :disabled=\"field.fieldOptions.disabled || sending\"\n                    :readonly=\"field.fieldOptions.readonly\"\n                    :type=\"field.fieldOptions.type !== null ? field.fieldOptions.type : 'text'\"\n                    @input=\"serverValidationErrors[field.id] = null\" \n                    v-model=\"form[field.id]\" \n                  ></md-textarea>\n\n                  <md-select \n                    style=\"z-index:11;\"\n                    v-if=\"field.fieldType==='brandSelect'\"\n                    :name=\"field.id\" \n                    :id=\"field.id\" \n                    :placeholder=\"field.label\"  \n                    v-model=\"form[field.id]\" \n                    md-dense \n                    :disabled=\"field.fieldOptions.disabled || sending\"\n                    :required=\"field.fieldOptions.required\"\n                    :readonly=\"field.fieldOptions.readonly\"\n                    :type=\"field.fieldOptions.type !== null ? field.fieldOptions.type : 'text'\"\n                    @input=\"serverValidationErrors[field.id] = null\" \n                    @md-selected=\"makeNew('brand')\"\n                  >\n                    <md-option key=\"new\" value=\"new\">\n                      Add new Brand\n                    </md-option>\n                    <md-option \n                      v-for=\"option in brands\" \n                      :key=\"option.id\" \n                      :value=\"option.id\"\n                    >\n                      {{option.name}}\n                    </md-option>\n                  </md-select>\n                  <edit-brand-card v-if=\"createNewBrand\"></edit-brand-card>\n                  \n                  <md-select \n                    style=\"z-index:11;\"\n                    v-if=\"field.fieldType==='independentSelect'\"\n                    :name=\"field.id\" \n                    :id=\"field.id\" \n                    :placeholder=\"field.label\"  \n                    v-model=\"form[field.id]\" \n                    md-dense \n                    :disabled=\"field.fieldOptions.disabled || sending\"\n                    :required=\"field.fieldOptions.required\"\n                    :readonly=\"field.fieldOptions.readonly\"\n                    :type=\"field.fieldOptions.type !== null ? field.fieldOptions.type : 'text'\"\n                    @input=\"serverValidationErrors[field.id] = null\" \n                    @md-selected=\"makeNew(field.id)\"\n                  >\n                    <md-option key=\"new\" value=\"new\">\n                      Add new {{field.label}}\n                    </md-option>\n                    <md-option \n                      v-for=\"option in independents\" \n                      :key=\"option.id\" \n                      :value=\"option.id\"\n                    >\n                      {{option.name}}\n                    </md-option>\n                  </md-select>\n\n                  <md-select \n                    style=\"z-index:11;\"\n                    v-if=\"field.fieldType==='dynamicSelect'\"\n                    :name=\"field.id\" \n                    :id=\"field.id\" \n                    :placeholder=\"field.label\"  \n                    v-model=\"form[field.id]\" \n                    md-dense \n                    :disabled=\"field.fieldOptions.disabled || sending\"\n                    :required=\"field.fieldOptions.required\"\n                    :readonly=\"field.fieldOptions.readonly\"\n                    :type=\"field.fieldOptions.type !== null ? field.fieldOptions.type : 'text'\"\n                    @input=\"serverValidationErrors[field.id] = null\" \n                  >\n                    <md-option \n                      v-for=\"option in dynamicOptions[field.id]\" \n                      :key=\"option.id\" \n                      :value=\"option.id\"\n                    >\n                      {{option.name}}\n                    </md-option>\n                  </md-select>\n\n                  <md-autocomplete \n                    style=\"z-index:11;\"\n                    v-if=\"field.fieldType==='autoComplete'\"\n                    v-model=\"form[field.id]\" \n                    :md-options=\"brands\" \n                    @md-changed=\"getBrands\" \n                    @md-opened=\"getBrands\"\n                  >\n                    <!-- <label>Brand</label> -->\n\n                    <template \n                      slot=\"md-autocomplete-item\" \n                      slot-scope=\"{ item }\"\n                    >\n                      {{ item.name }}\n                    </template>\n                  </md-autocomplete>\n\n                  <md-file \n                    v-if=\"field.fieldType==='file'\"\n                    :placeholder=\"field.label\"  \n                    :name=\"field.id\" \n                    :id=\"field.id\" \n                    :required=\"field.fieldOptions.required\"\n                    :disabled=\"field.fieldOptions.disabled || sending\"\n                    :readonly=\"field.fieldOptions.readonly\"\n                    :type=\"field.fieldOptions.type !== null ? field.fieldOptions.type : 'file'\"\n                    :accept=\"field.fieldOptions.accept\"\n                    @input=\"serverValidationErrors[field.id] = null\" \n                    v-model=\"form[field.id]\" \n                  />\n\n                    <!-- class=\"md-layout md-alignment-center-right\" -->\n                  <md-switch \n                    style=\"padding-top: 20px;\"\n                    v-if=\"field.fieldType==='switch'\"\n                    :placeholder=\"field.label\"  \n                    :name=\"field.id\" \n                    :id=\"field.id\" \n                    :required=\"field.fieldOptions.required\"\n                    :disabled=\"field.fieldOptions.disabled || sending\"\n                    :readonly=\"field.fieldOptions.readonly\"\n                    :type=\"field.fieldOptions.type !== null ? field.fieldOptions.type : 'checkbox'\"\n                    @input=\"serverValidationErrors[field.id] = null\" \n                    v-model=\"form[field.id]\"\n                  >\n                  </md-switch>\n                  <md-switch \n                    style=\"padding-top: 20px;\"\n                    v-if=\"field.fieldType==='independentOwnerSwitch'\"\n                    :placeholder=\"field.label\"  \n                    :name=\"field.id\" \n                    :id=\"field.id\" \n                    :required=\"field.fieldOptions.required\"\n                    :disabled=\"field.fieldOptions.disabled || sending\"\n                    :readonly=\"field.fieldOptions.readonly\"\n                    :type=\"field.fieldOptions.type !== null ? field.fieldOptions.type : 'checkbox'\"\n                    @input=\"serverValidationErrors[field.id] = null\" \n                    :value=\"item[field.id]\"\n                    v-model=\"form[field.id]\"\n                  >\n                    <!-- @change=\"independentOwnerSwitch\" -->\n                  </md-switch>\n\n                    <!-- :onclick=\"alert('hello there')\" -->\n                  <!-- <span \n                    id=\"attach-button\"\n                    v-if=\"field.fieldType==='image'\"\n                    @click=\"alert('clicked')\"\n                    >\n                    <md-icon class=\"md-layout md-alignment-center-left\">attach_file</md-icon>\n                    <md-select \n                      class=\"md- md-layout md-alignment-center-right\"\n                      :placeholder=\"field.label\"\n                      @md-opened=\"alert('clicked')\"\n                    ></md-select>\n                  </span> -->\n\n                  <!-- Image uploader -->\n                    <md-icon\n                      v-if=\"field.fieldType==='image'\"\n                      @click.native=\"showImageDialog[field.id]=!showImageDialog[field.id]\">\n                        attach_file\n                    </md-icon>\n                    <label \n                      v-if=\"field.fieldType==='image'\"\n                      :for=\"field.id\" v-text=\"field.label\">\n                    </label>\n                    <md-input\n                      v-if=\"field.fieldType==='image'\"\n                      readonly\n                      :placeholder=\"field.label\"\n                      :name=\"field.id\" \n                      :id=\"field.id\" \n                      :required=\"field.fieldOptions.required\"\n                      :disabled=\"field.fieldOptions.disabled || sending\"\n                      @click=\"showImageDialog[field.id]=!showImageDialog[field.id]\"\n                      v-model=\"image[field.id]\"\n                    />\n                    <image-dialog\n                      v-if=\"field.fieldType==='image'\"\n                      :showDialog=\"showImageDialog[field.id]\"\n                      @close-image-dialog=\"showImageDialog[field.id]=false\"\n                      :imageID=\"form[field.id]\"\n                      :label=\"field.label\"\n                      :id=\"field.id\"\n                      model=\"App\\\\Models\\\\Independent\"\n                      @file-uploaded=\"setImage\"\n                    ></image-dialog>\n                  \n                  <!-- <span class=\"md-error\" v-text=\"getErrors(field)[0]\"></span> -->\n                  <span class=\"md-error\" v-if=\"hasValidation(field, 'required')\">\n                    <!-- <span v-if=\"this.$v.form[field.id][type] === false\"> -->\n                      The {{field.label}} is required <br>\n                    <!-- </span> -->\n                  </span>\n                  <span class=\"md-error\" v-if=\"hasValidation(field, 'minLength')\">\n                    The {{field.label}} must be longer than {{$v.form[field.id].$params.minLength.min}} characters <br>\n                  </span>\n                  <span class=\"md-error\" v-if=\"hasValidation(field, 'decimal')\">\n                    The {{field.label}} must be a valid decimal number  <br>\n                  </span>\n                  <span class=\"md-error\" v-if=\"hasValidation(field, 'integer')\">\n                    The {{field.label}} must be a valid whole number  <br>\n                  </span>\n                  <span class=\"md-error\" v-if=\"hasValidation(field, 'alphaNum')\">\n                    The {{field.label}} must contain only Alpha Numeric characters with no spaces  <br>\n                  </span>\n                  <span class=\"md-error\" v-if=\"hasValidation(field, 'url')\">\n                    The {{field.label}} must be URL with no spaces  <br>\n                  </span>\n                  <span class=\"md-error\" v-if=\"hasValidation(field, 'slug')\">\n                    The {{field.label}} must contain alpha numeric characters and hyphen (-) only <br>\n                  </span>\n                </md-field>\n                <span v-if=\"serverValidationErrors[field.id]\">\n                  <span \n                    class=\"md-error\" \n                    v-for=\"error in serverValidationErrors[field.id]\"\n                    :key=\"error\"                    \n                  >\n                    {{error}}\n                    <br>\n                  </span>\n                </span>\n              </span>            \n            </div>\n          </div>\n        </md-card-content>\n        \n        <md-progress-bar md-mode=\"indeterminate\" v-if=\"sending\" />\n\n        <md-card-actions>\n          <md-button type=\"submit\" class=\"md-primary\" :disabled=\"sending\">\n            <span v-if=\"newItem\">Create {{itemType}}</span>\n            <span v-else>Update {{itemType}}</span>\n          </md-button>\n        </md-card-actions>\n      </md-card>\n    </form>\n  </div>\n</template>\n\n<script>\n  import { validationMixin } from 'vuelidate'\n  import {\n    helpers,\n    required,\n    email,\n    minLength,\n    maxLength,\n    alphaNum,\n    decimal,\n    integer,\n    url,\n  } from 'vuelidate/lib/validators'\n\n  const slug = helpers.regex('alpha', /^[-a-zA-Z0-9_]+$/)\n  import ImageDialog from './ImageDialog.vue'\n  import EditBrandCard from './EditBrandCard.vue'\n  \n  export default {\n    name: 'edit-item-card',\n    mixins: [validationMixin],\n    components: {\n      'edit-brand-card': EditBrandCard,\n      ImageDialog,\n      // MdFileIcon\n    },\n    props: {\n      item: {type: Object, required: false},\n      icon: {\n        default:\"shopping_bag\", \n        required: false\n        },\n      newItem: {\n        type:Boolean, \n        required: true\n      },\n      itemType: {\n        default:'Product',\n        required: false\n        },\n      itemInfo: {\n        required: false,\n        type: [Array, Object], \n        default:()=>\n        [\n          {\n            label: \"ID\",\n            id: \"id\",\n            fieldType: 'input',\n            fieldOptions:{\n              hideForNew: true,\n              type: 'number',\n              required: true,\n              disabled: true,\n            },\n            validationsFunctions: {required, decimal},\n          },\n          {\n            label: \"Name\",\n            id: \"name\",\n            fieldType: 'input',\n            validationsFunctions: {required, minLength:minLength(3)},\n            fieldOptions: {\n              type: 'text',\n              required: true,\n            }\n          },\n          {\n            label: \"Slug\",\n            id: \"slug\",\n            fieldType: 'input',\n            validationsFunctions: {required, minLength:minLength(3), slug},\n            fieldOptions: {\n              type: 'text',\n              required: true,\n            }\n          },          \n          {\n            label: \"Price\",\n            id: \"price\",\n            fieldType: 'input',\n            validationsFunctions: {required,decimal},\n            fieldOptions: {\n              type: 'number',\n              required: true,  \n              min: 0,\n              max: null,\n            }\n          },\n          {\n            label: \"VAT\",\n            id: \"vat\",\n            fieldType: 'input',\n            validationsFunctions: {required,decimal},\n            fieldOptions: {\n              type: 'number',\n              required: true,  \n              min: 0,\n              max: null,\n            }\n          },\n          {\n            label: \"Deposit\",\n            id: \"deposit\",\n            fieldType: 'input',\n            validationsFunctions: {decimal},\n            fieldOptions: {\n              type: 'number',\n              required: false,  \n              min: 0,\n              max: null,\n            }\n          }, \n          {\n            label: \"Brand\",\n            id: \"brand_id\",\n            fieldType: 'brandSelect',\n            validationsFunctions: {required},\n            fieldOptions: {\n              required: true,  \n            }\n          },\n          // {\n          //   label: \"Independent\",\n          //   id: \"independent_id\",\n          //   fieldType: 'independentSelect',\n          //   validationsFunctions: {required},\n          //   fieldOptions: {\n          //     required: true,  \n          //   }\n          // }\n            // acOptions: {},\n\n            // dynamicSelect: true,\n            // options:[\n            //   {value:'1', label:'Essential'},\n            //   {value:'2', label:'Ecover'},\n            //   {value:'200', label:'Meridian'},\n            // ],\n            // dynamicSelectSettings:{\n            //   model: 'brands',\n            //   value: 'id',\n            //   label: 'name',\n            // },\n        ]\n      }\n    },\n\n    data: () => ({\n      form: {},\n      serverValidationErrors: {},\n      itemSaved: false,\n      sending: false,\n      dynamicOptions: {},\n\n      value: null,\n\n      brands:[],\n      createNewBrand:false,\n\n      independents:[],\n      createNewIndependent:false,\n\n      image:{},\n      showImageDialog:{},\n    }),\n    \n    \n    validations(){\n      var form = new Object();\n      for (let i = 0; i < this.itemInfo.length; i++) {\n        let field = this.itemInfo[i].id\n        if(!(typeof this.itemInfo[i].fieldOptions.hideForNew !== 'undefined' && this.itemInfo[i].fieldOptions.hideForNew == true && this.newItem)){\n          form[field] = this.itemInfo[i].validationsFunctions\n        }\n      }\n      return {form};\n    },\n   \n    methods: {\n      getValidationClass (fieldName) {\n        const field = this.$v.form[fieldName]\n        if (field) {\n          return {\n            'md-invalid': field.$invalid && field.$dirty\n          }\n        }\n      },\n\n      hasValidation(field, type){\n        if (typeof this.$v.form[field.id] != \"undefined\"){\n          if (typeof this.$v.form[field.id][type] != \"undefined\"){\n            if(this.$v.form[field.id][type] === false){\n              return true\n            }\n          }\n        }\n        return false\n      },\n\n      // getErrors(field){\n      //   let errors = new Array()\n      //   if (typeof this.$v.form[field.id] != \"undefined\" && $error === true){\n      //     switch(this.$v.form[field.id].$params){\n      //       case \"required\":\n      //         if(this.$v.form[field.id].required === false){\n      //           errors.push(`The ${field.label} is required`)\n      //         }\n      //       break;\n      //       case \"minLength\":\n      //         if(this.$v.form[field.id].minLength === false){\n      //           errors.push(`The ${field.label} must be longer than ${$v.form[field.id].$params.minLength.min} characters`)\n      //         }\n      //       break;\n      //     }\n      //   }\n      //   console.log(errors);\n      //   return errors\n      // },\n\n      // clearForm() {\n      //   this.$v.$reset()\n      //   for (let i = 0; i < this.itemInfo.length; i++) {\n      //     let field = this.itemInfo[i].id\n      //     switch(this.itemInfo[i].fieldOptions.type){\n      //       case 'text':\n      //         this.form[field] = ''\n      //         break;\n      //       case 'number':\n      //         this.form[field] = 0.00\n      //         break;\n      //     } \n      //   }\n      // },\n      \n      setForm () {\n        for (let i = 0; i < this.itemInfo.length; i++) {\n          if(typeof this.itemInfo[i] !== 'undefined'){\n            let field = this.itemInfo[i].id\n            try{\n              this.$set(this.form, field, this.item[field]);\n              if(this.itemInfo[i].fieldType==='image'){\n                // showImageDialog[field.id]\n                this.$set(this.showImageDialog, field, false);\n              }\n              // Vue.set( this.form, field, this.item[field] )\n              // this.form[field] = this.item[field]\n            }\n            catch{\n              console.log('set form error');\n            }\n          }\n        }\n      },\n\n      validateItem() {\n        this.$v.$touch()\n        if (!this.$v.$invalid) {\n          this.saveItem()\n        }\n      },\n\n      saveItem () {\n        this.sending = true\n        if(this.newItem){\n          this.createItem();\n        }else{\n          this.updateItem();\n        }\n      },\n\n      updateItem() {\n        this.$store.dispatch(this.vueStoreModule + \"/update\", this.form)\n        .then(response =>{\n          console.log(\"Edit Item Card Update success response\");\n          this.$store.dispatch(\"alerts/success\", `${this.itemType} updated successfully.`)\n          this.itemSaved = true\n          this.sending = false\n          let item = this.$store.getters[this.vueStoreModule + \"/\" +this.itemType.toLowerCase()]\n          this.$emit('item-updated', item)\n        })\n        .catch (e=>{\n          console.log(\"Edit Item Card Update error response\");\n          this.$store.dispatch(\"alerts/error\", \"Oops, something went wrong! \" + e.message)\n          this.sending = false\n          for (let i = 0; i < this.itemInfo.length; i++) \n          {\n            let field = this.itemInfo[i].id\n            if(e.errors[field]){\n              this.serverValidationErrors[field] = e.errors[field]\n            }\n          }\n        })\n      },\n\n      createItem() {\n        this.$store.dispatch(this.vueStoreModule + \"/add\", this.form)\n        .then(response =>{\n          this.$store.dispatch(\"alerts/success\", `${this.itemType} created successfully.`)\n          this.itemSaved = true\n          this.sending = false\n          let item = this.$store.getters[this.vueStoreModule + \"/\" + this.itemType.toLowerCase()]\n          this.$emit('item-created', item)\n        })\n        .catch (e=>{\n          this.$store.dispatch(\"alerts/error\", \"Oops, something went wrong! \" + e.message)\n          this.sending = false\n          for (let i = 0; i < this.itemInfo.length; i++) \n          {\n            let field = this.itemInfo[i].id\n            if(e.errors[field]){\n              this.serverValidationErrors[field] = e.errors[field]\n            }\n          }\n        })\n      },\n\n\n      // async getDynamicOptions() {\n      //   let options = new Array\n        \n      //   for (let i = 0; i < this.itemInfo.length; i++){\n      //     if(typeof this.itemInfo[i].dynamicSelect !== \"undefined\" && this.itemInfo[i].dynamicSelect === true){\n      //       let storeModule = this.itemInfo[i].dynamicSelectSettings.model\n      //       await this.$store.dispatch(storeModule + \"/list\", '')\n      //       this.dynamicOptions[this.itemInfo[i].id] = await this.$store.getters[storeModule + \"/list\"]\n      //     }\n      //   }\n      //   return options\n      // },\n\n      // getBrands(searchTerm) {\n      //   if (!searchTerm) {\n      //     this.brands = new Promise(resolve => {\n      //       this.$store.dispatch(\"brands/list\")\n      //         .then(response =>{\n      //           resolve(this.$store.getters[\"brands/list\"])\n      //         })\n      //       })\n      //   }else{\n      //       const term = searchTerm.toLowerCase()\n      //       resolve(this.brandList.filter(({ name }) => name.toLowerCase().includes(term)))\n      //   }\n      // },\n\n      async setSelectOptions(model, forceUpdate=false) {\n        console.log('set Select options');\n        if(typeof this.$store.getters[model + \"/list\"].length == 'undefined' || forceUpdate === true){\n          await this.$store.dispatch(model + \"/list\")\n            // .then(response =>{\n              this[model] = await this.$store.getters[model + \"/list\"]\n              console.log(this[model])\n            // })\n        }else{\n          this[model] =  this.$store.getters[model + \"/list\"]\n        }\n      },\n\n      makeNew(model){\n        if(this.form[model + '_id'] === 'new'){\n          let variable = 'createNew' +  model.charAt(0).toUpperCase() + model.slice(1);;\n          this[variable] = true;\n          // alert(\"create new brand!\");\n        }\n      },\n\n      setImage(image){\n        this.$set(this.form, image.id, image.file.id);\n        // this.form[image.id] = image.file.id; \n        this.$set(this.image, image.id, image.file.name);\n        // this.image[image.id] = image.file.name;\n      }\n    },\n\n    computed:{\n      vueStoreModule(){\n        return this.itemType.toLowerCase() + \"s\"\n      },\n      loading(){\n        \n        // return typeof this.item.length;\n        if(this.newItem === false){\n          if(this.item.id == null || typeof this.item.id == 'undefined'){\n            return true;\n          }\n        }\n        return false;\n      }\n    },\n\n    created(){\n      \n      // if(!this.newItem){\n      //   console.log('not new item');\n        // if(typeof this.item !== 'undefined'){\n        //   this.form = this.item;\n        // }\n        // else{\n          // let permission =  await this.$store.getters[\"profile/currentPermissions\"];\n          // this.form = permission.independent\n        // }\n        // this.setForm()\n      // }\n    },\n\n    mounted(){\n      let brandSet = false;\n      let independentSet = false;\n      for (let i = 0; i < this.itemInfo.length; i++){\n        // console.log('Looping through item info in mounted');\n        // console.log(this.itemInfo[i]);\n        if(this.itemInfo[i].fieldType == \"brandSelect\" && brandSet === false){\n          console.log('setting up brands array in mounted');\n          this.setSelectOptions('brands');\n          brandSet = true;\n        }\n        if(this.itemInfo[i].fieldType == \"independentSelect\" && independentSet === false){\n          console.log('setting up independents array in mounted');\n          this.setSelectOptions('independents');\n          independentSet = true;\n        }\n      }\n    },\n    watch: {\n      loading(loading){\n        if(loading===false){\n          this.setForm();\n        }\n      }\n    }\n\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .md-progress-bar {\n    position: absolute;\n    top: 0;\n    right: 0;\n    left: 0;\n  }\n  .md-error{\n    bottom: -8px;\n    color: red;\n    font-size: smaller;\n  }\n  >>>.md-menu-content{\n        z-index: 60;;\n      }\n  \n  \n</style>\n\n<style lang=\"scss\">\n    #attach-button {\n      .md-ripple{\n        background-color: white ;\n        color:black;\n      }\n    }\n\n// .my-image {\n//     display: flex;\n//     flex: 1;\n\n//     input[type=\"file\"] {\n//       width: 1px;\n//       height: 1px;\n//       margin: -1px;\n//       padding: 0;\n//       overflow: hidden;\n//       position: absolute;\n//       clip: rect(0 0 0 0);\n//       border: 0;\n//     }\n\n//     .md-file-icon {\n//       &:not(.md-disabled) {\n//         cursor: pointer;\n//       }\n\n//       &.md-disabled {\n//         pointer-events: none;\n//       }\n//     }\n//   }\n</style>"]}]}