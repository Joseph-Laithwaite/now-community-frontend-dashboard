{"remainingRequest":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/src/components/ImageUpload.vue?vue&type=style&index=0&id=d1499988&scoped=true&lang=css&","dependencies":[{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/src/components/ImageUpload.vue","mtime":1605619181700},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KXsKICAubWQtdGFicy1jb250ZW50ICAgewogICAgaGVpZ2h0OiAxMDAlICFpbXBvcnRhbnQ7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgfSAgCn0K"},{"version":3,"sources":["ImageUpload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GA;AACA;AACA;AACA;AACA;AACA","file":"ImageUpload.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        <div>\n            <label :for=\"itemID\">\n            <img \n                id=image \n                :src=\"url\" \n                :height=\"height\" \n                :width=\"width\"\n                style=\"\n                cursor:pointer;\n                display: block;\n                margin-left: auto;\n                margin-right: auto; \"\n            />\n            </label>\n            <input \n                :id=\"itemID\" \n                type=file \n                accept=\"image/*\"\n                :name=\"itemID\"\n                @change=\"changeFile\"\n                style=\"display: none;\"\n            >\n        </div>\n        <span class=\"md-error\" v-if=\"fileOversized\">\n            file too large.\n            <br>\n        </span>\n    </div>\n</template>\n\n<script>\nimport Axios from 'axios';\nexport default {\n    props:{\n        itemID: { \n            type: String,\n            default: \"product_image\",\n        },\n        imageURL: {default:null},\n        placeholderURL: {default: \"https://wolper.com.au/wp-content/uploads/2017/10/image-placeholder.jpg\"},\n        maxFileSize: { default:296960 },\n        height:{ default:100} ,\n        width:{ default:100}\n    },\n    \n    data: () => ({\n        fileOversized: false,\n        selectedFile: null,\n        url: \"\",\n    }),\n\n    methods: {\n        changeFile(event){\n            // var file = document.getElementById(this.itemID).files[0];\n            this.selectedFile = event.target.files[0];\n            console.log(this.selectedFile);\n            if(this.selectedFile.size <= this.maxFileSize){\n                var reader  = new FileReader();\n                reader.onload = (e) => {\n                //   var image = document.getElementById('image');\n                  this.url = e.target.result;\n                }\n                reader.readAsDataURL(this.selectedFile);\n                this.$emit('new-file', this.selectedFile);\n            }else{\n                this.$store.dispatch(\"alerts/error\", \"The image you're trying to upload must be under \" + this.maxFileSize/1000 + \"kb\")\n                // image.src = this.placeholderURL;\n            }\n        },\n        // async \n        fileFromUrl(url){\n            // Axios.get(url)\n            // .then(response=>{\n            //     console.log(response.blob());\n            //     this.$emit('new-file', response.blob());\n            // })\n            fetch(url, {\n                method: 'GET', // *GET, POST, PUT, DELETE, etc.\n                mode: 'cors', // no-cors, *cors, same-origin\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n                credentials: 'include', // include, *same-origin, omit\n                headers: {\n                    'Access-Control-Allow-Origin':'*'\n                // 'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                })\n                .then(res => res.blob()) // Gets the response and returns it as a blob\n                .then(blob => {\n                    console.log(blob);\n                    this.$emit('new-file', blob);\n                });\n            }\n        },\n        created(){\n            if(typeof this.imageURL == null){\n                this.url = this.placeholderURL;\n            }\n            else{\n                this.fileFromUrl(this.imageURL);\n                this.url = this.imageURL;\n            }\n        }\n    }\n</script>\n\n<style scoped>\n\n\n@media (max-width: 768px){\n  .md-tabs-content   {\n    height: 100% !important;\n    overflow: hidden;\n    }  \n}\n</style>"]}]}