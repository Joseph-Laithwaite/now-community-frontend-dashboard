{"remainingRequest":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/src/components/EditBrandCard.vue?vue&type=style&index=0&id=020ddc66&lang=scss&scoped=true&","dependencies":[{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/src/components/EditBrandCard.vue","mtime":1606150740112},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/josephlaithwaite/Documents/VueLearning/NC-vue-laravel-dashboard/vue-material-dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5tZC1wcm9ncmVzcy1iYXIgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDA7CiAgcmlnaHQ6IDA7CiAgbGVmdDogMDsKfQoubWQtZXJyb3J7CiAgYm90dG9tOiAtOHB4OwogIGNvbG9yOiByZWQ7CiAgZm9udC1zaXplOiBzbWFsbGVyOwp9Cj4+Pi5tZC1tZW51LWNvbnRlbnR7CiAgICAgIHotaW5kZXg6IDYwOzsKICAgIH0KICAgIAoK"},{"version":3,"sources":["EditBrandCard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4TA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EditBrandCard.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <EditItemCard\n      icon=\"storefront\"\n      :newItem=\"true\"\n      itemType='Brand'\n      :itemInfo=\"itemInfo\"\n    },\n\n    ></EditItemCard>\n  </div>\n</template>\n\n<script>\n  import { validationMixin } from 'vuelidate'\n  import {\n    helpers,\n    required,\n    email,\n    minLength,\n    maxLength,\n    alphaNum,\n    decimal,\n    integer,\n    url,\n  } from 'vuelidate/lib/validators'\n\n  const slug = helpers.regex('alpha', /^[-a-zA-Z0-9_]+$/)\n  \n  import EditItemCard from '../components/EditItemCard.vue'\n  \n  export default {\n    name: 'edit-brand-card',\n    components: {\n      EditItemCard\n    },\n    props: {\n      item: {type: Object, required: false},\n\n    data: () => ({\n      itemInfo:[\n        {\n          label: \"ID\",\n          id: \"id\",\n          fieldType: 'input',\n          fieldOptions:{\n            hideForNew: true,\n            type: 'number',\n            required: true,\n            disabled: true,\n          },\n          validationsFunctions: {required, decimal},\n        },\n        {\n          label: \"Name\",\n          id: \"name\",\n          fieldType: 'input',\n          validationsFunctions: {required, minLength:minLength(3)},\n          fieldOptions: {\n            type: 'text',\n            required: true,\n          }\n        },\n        {\n          label: \"Slug\",\n          id: \"slug\",\n          fieldType: 'input',\n          validationsFunctions: {required, minLength:minLength(3), slug},\n          fieldOptions: {\n            type: 'text',\n            required: true,\n          }\n        },          \n        // {\n        //   label: \"Independent\",\n        //   id: \"independent\",\n        //   fieldType: 'independentSelect',\n        //   validationsFunctions: {required},\n        //   fieldOptions: {\n        //     type: 'select',\n        //     required: true,\n        //   }\n        // },\n        {\n          label: \"Do you own/ manage this brand?\",\n          id: \"owner\",\n          fieldType: 'switch',\n          // validationsFunctions: {required},\n          // fieldOptions: {\n          //   type: 'select',\n          //   required: true,\n          // }\n        },\n      ]\n    }),\n    \n    \n    validations(){\n      var form = new Object();\n      for (let i = 0; i < this.itemInfo.length; i++) {\n        let field = this.itemInfo[i].id\n        if(!(typeof this.itemInfo[i].fieldOptions.hideForNew !== 'undefined' && this.itemInfo[i].fieldOptions.hideForNew == true && this.newItem)){\n          form[field] = this.itemInfo[i].validationsFunctions\n        }\n      }\n      return {form};\n    },\n   \n    methods: {\n      getValidationClass (fieldName) {\n        const field = this.$v.form[fieldName]\n        if (field) {\n          return {\n            'md-invalid': field.$invalid && field.$dirty\n          }\n        }\n      },\n\n      hasValidation(field, type){\n        if (typeof this.$v.form[field.id] != \"undefined\"){\n          if (typeof this.$v.form[field.id][type] != \"undefined\"){\n            if(this.$v.form[field.id][type] === false){\n              return true\n            }\n          }\n        }\n        return false\n      },\n\n      // getErrors(field){\n      //   let errors = new Array()\n      //   if (typeof this.$v.form[field.id] != \"undefined\" && $error === true){\n      //     switch(this.$v.form[field.id].$params){\n      //       case \"required\":\n      //         if(this.$v.form[field.id].required === false){\n      //           errors.push(`The ${field.label} is required`)\n      //         }\n      //       break;\n      //       case \"minLength\":\n      //         if(this.$v.form[field.id].minLength === false){\n      //           errors.push(`The ${field.label} must be longer than ${$v.form[field.id].$params.minLength.min} characters`)\n      //         }\n      //       break;\n      //     }\n      //   }\n      //   console.log(errors);\n      //   return errors\n      // },\n\n      // clearForm() {\n      //   this.$v.$reset()\n      //   for (let i = 0; i < this.itemInfo.length; i++) {\n      //     let field = this.itemInfo[i].id\n      //     switch(this.itemInfo[i].fieldOptions.type){\n      //       case 'text':\n      //         this.form[field] = ''\n      //         break;\n      //       case 'number':\n      //         this.form[field] = 0.00\n      //         break;\n      //     } \n      //   }\n      // },\n      \n      setForm () {\n        for (let i = 0; i < this.itemInfo.length; i++) {\n          if(typeof this.itemInfo[i] !== 'undefined'){\n            let field = this.itemInfo[i].id\n            // if(this.itemInfo[i].autocomplete){\n            //   this.form[field] = this.item[field]\n            // }else{\n              try{\n                this.form[field] = this.item[field]\n              }\n              catch{\n                console.log('set form error');\n              }\n            // }\n          }\n        }\n      },\n\n      validateItem() {\n        this.$v.$touch()\n        if (!this.$v.$invalid) {\n          this.saveItem()\n        }\n      },\n\n      saveItem () {\n        this.sending = true\n        if(this.newItem){\n          this.createItem();\n        }else{\n          this.updateItem();\n        }\n      },\n\n      updateItem() {\n        this.$store.dispatch(this.vueStoreModule + \"/update\", this.form)\n        .then(response =>{\n          console.log(\"Edit Item Card Update success response\");\n          this.$store.dispatch(\"alerts/success\", `${this.itemType} updated successfully.`)\n          this.itemSaved = true\n          this.sending = false\n          let item = this.$store.getters[this.vueStoreModule + \"/\" +this.itemType.toLowerCase()]\n          this.$emit('item-updated', item)\n        })\n        .catch (e=>{\n          console.log(\"Edit Item Card Update error response\");\n          this.$store.dispatch(\"alerts/error\", \"Oops, something went wrong! \" + e.message)\n          this.sending = false\n          for (let i = 0; i < this.itemInfo.length; i++) \n          {\n            let field = this.itemInfo[i].id\n            if(e.errors[field]){\n              this.serverValidationErrors[field] = e.errors[field]\n            }\n          }\n        })\n      },\n\n      createItem() {\n        this.$store.dispatch(this.vueStoreModule + \"/add\", this.form)\n        .then(response =>{\n          this.$store.dispatch(\"alerts/success\", `${this.itemType} created successfully.`)\n          this.itemSaved = true\n          this.sending = false\n          let item = this.$store.getters[this.vueStoreModule + \"/\" + this.itemType.toLowerCase()]\n          this.$emit('item-created', item)\n        })\n        .catch (e=>{\n          this.$store.dispatch(\"alerts/error\", \"Oops, something went wrong! \" + e.message)\n          this.sending = false\n          for (let i = 0; i < this.itemInfo.length; i++) \n          {\n            let field = this.itemInfo[i].id\n            if(e.errors[field]){\n              this.serverValidationErrors[field] = e.errors[field]\n            }\n          }\n        })\n      },\n\n\n      async getDynamicOptions() {\n        let options = new Array\n        \n        for (let i = 0; i < this.itemInfo.length; i++){\n          if(typeof this.itemInfo[i].dynamicSelect !== \"undefined\" && this.itemInfo[i].dynamicSelect === true){\n            let storeModule = this.itemInfo[i].dynamicSelectSettings.model\n            await this.$store.dispatch(storeModule + \"/list\", '')\n            this.dynamicOptions[this.itemInfo[i].id] = await this.$store.getters[storeModule + \"/list\"]\n          }\n        }\n        return options\n      },\n\n      getBrands(searchTerm) {\n        if (!searchTerm) {\n          this.brands = new Promise(resolve => {\n            this.$store.dispatch(\"brands/list\")\n              .then(response =>{\n                resolve(this.$store.getters[\"brands/list\"])\n              })\n            })\n        }else{\n            const term = searchTerm.toLowerCase()\n            resolve(this.brandList.filter(({ name }) => name.toLowerCase().includes(term)))\n        }\n      },\n\n      setBrands() {\n        this.$store.dispatch(\"brands/list\")\n          .then(response =>{\n            this.brands =  this.$store.getters[\"brands/list\"]\n          })\n      },\n\n      createNewBrand(){\n        if(this.form.brand_id === 'new_brand'){\n          createNewBrand = true;\n          // alert(\"create new brand!\");\n        }\n      }\n    },\n\n    computed:{\n      vueStoreModule(){\n        return this.itemType.toLowerCase() + \"s\"\n      },\n    },\n\n    async created(){\n      \n      if(!this.newItem){\n        if(typeof this.item !== 'undefined'){\n          this.form = this.item;\n        }else{\n          let permission =  await this.$store.getters[\"profile/currentPermissions\"];\n          this.form = permission.independent\n        }\n        this.setForm()\n      }\n    },\n\n    mounted(){\n      this.setBrands();\n      // this.get\n      // this.dynamicOptions()\n    }\n    \n  }\n</script>\n\n<style lang=\"scss\" scoped>\n  .md-progress-bar {\n    position: absolute;\n    top: 0;\n    right: 0;\n    left: 0;\n  }\n  .md-error{\n    bottom: -8px;\n    color: red;\n    font-size: smaller;\n  }\n  >>>.md-menu-content{\n        z-index: 60;;\n      }\n      \n  \n</style>"]}]}